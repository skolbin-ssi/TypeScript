=== /a.ts ===
enum SyntaxKind {
>SyntaxKind : SyntaxKind

  ImportClause,
>ImportClause : SyntaxKind.ImportClause

  ExportDeclaration
>ExportDeclaration : SyntaxKind.ExportDeclaration
}

const enum SymbolFlags {
>SymbolFlags : SymbolFlags

  Type = "Type",
>Type : SymbolFlags.Type
>"Type" : "Type"

  Value = "Value"
>Value : SymbolFlags.Value
>"Value" : "Value"
}

export type { SyntaxKind };
>SyntaxKind : SyntaxKind

export { SymbolFlags };
>SymbolFlags : typeof SymbolFlags

=== /b.ts ===
import type { SyntaxKind, SymbolFlags } from './a';
>SyntaxKind : SyntaxKind
>SymbolFlags : import("/a").SymbolFlags

SyntaxKind.ImportClause;
>SyntaxKind.ImportClause : any
>SyntaxKind : any
>ImportClause : any

SymbolFlags.Type;
>SymbolFlags.Type : any
>SymbolFlags : any
>Type : any

let kind: SyntaxKind.ImportClause;
>kind : SyntaxKind.ImportClause
>SyntaxKind : any

let flags: SymbolFlags;
>flags : import("/a").SymbolFlags

type TypeFlag = SymbolFlags.Type;
>TypeFlag : import("/a").SymbolFlags.Type
>SymbolFlags : any

export type { TypeFlag };
>TypeFlag : import("/a").SymbolFlags.Type

=== /c.ts ===
import { SymbolFlags } from './a';
>SymbolFlags : typeof SymbolFlags

import type { TypeFlag } from './b';
>TypeFlag : SymbolFlags.Type

const flags: TypeFlag = SymbolFlags.Type;
>flags : SymbolFlags.Type
>SymbolFlags.Type : SymbolFlags.Type
>SymbolFlags : typeof SymbolFlags
>Type : SymbolFlags.Type

