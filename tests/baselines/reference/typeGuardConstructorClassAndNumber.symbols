=== tests/cases/compiler/typeGuardConstructorClassAndNumber.ts ===
// Typical case
class C1 {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    property1: string;
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}

let var1: C1 | number;
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

if (var1.constructor == C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] == C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1.constructor === C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] === C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 == var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 == var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 === var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 === var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}

if (var1.constructor != C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] != C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1.constructor !== C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] !== C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 != var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 != var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 !== var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 !== var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}

