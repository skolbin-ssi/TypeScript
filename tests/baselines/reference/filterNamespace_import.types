=== /ns.ts ===
namespace ns {
>ns : typeof ns

  export type Type = string;
>Type : string

  export class Class {}
>Class : Class

  export const Value = "";
>Value : ""
>"" : ""

  export namespace nested {
>nested : typeof nested

    export class NestedClass {
>NestedClass : NestedClass

      a!: string;
>a : string
    }
  }
}

export default ns;
>ns : typeof ns

=== /a.ts ===
import type ns from './ns';
>ns : any

ns.Class; // Error
>ns.Class : any
>ns : any
>Class : any

ns.Value; // Error
>ns.Value : any
>ns : any
>Value : any

let c: ns.Class;
>c : import("/ns").default.Class
>ns : any

let t: ns.Type = "";
>t : string
>ns : any
>"" : ""

let n: ns.nested.NestedClass = { a: '' };
>n : import("/ns").default.nested.NestedClass
>ns : any
>nested : any
>{ a: '' } : { a: string; }
>a : string
>'' : ""

