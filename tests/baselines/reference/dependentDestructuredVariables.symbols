=== tests/cases/conformance/controlFlow/dependentDestructuredVariables.ts ===
type Action =
>Action : Symbol(Action, Decl(dependentDestructuredVariables.ts, 0, 0))

    | { kind: 'A', payload: number }
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 1, 7))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 1, 18))

    | { kind: 'B', payload: string };
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 2, 7))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 2, 18))

function f10({ kind, payload }: Action) {
>f10 : Symbol(f10, Decl(dependentDestructuredVariables.ts, 2, 37))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 4, 14))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 4, 20))
>Action : Symbol(Action, Decl(dependentDestructuredVariables.ts, 0, 0))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 4, 14))

        payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 4, 20))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
    if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 4, 14))

        payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 4, 20))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
    }
}

function f11(action: Action) {
>f11 : Symbol(f11, Decl(dependentDestructuredVariables.ts, 11, 1))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 13, 13))
>Action : Symbol(Action, Decl(dependentDestructuredVariables.ts, 0, 0))

    const { kind, payload } = action;
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 14, 11))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 14, 17))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 13, 13))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 14, 11))

        payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 14, 17))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
    if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 14, 11))

        payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 14, 17))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
    }
}

function f12({ kind, payload }: Action) {
>f12 : Symbol(f12, Decl(dependentDestructuredVariables.ts, 21, 1))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 23, 14))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 23, 20))
>Action : Symbol(Action, Decl(dependentDestructuredVariables.ts, 0, 0))

    switch (kind) {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 23, 14))

        case 'A':
            payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 23, 20))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))

            break;
        case 'B':
            payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 23, 20))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))

            break;
        default:
            payload;  // never
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 23, 20))
    }
}

type Action2 =
>Action2 : Symbol(Action2, Decl(dependentDestructuredVariables.ts, 34, 1))

    | { kind: 'A', payload: number | undefined }
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 37, 7))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 37, 18))

    | { kind: 'B', payload: string | undefined };
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 38, 7))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 38, 18))

function f20({ kind, payload }: Action2) {
>f20 : Symbol(f20, Decl(dependentDestructuredVariables.ts, 38, 49))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 40, 14))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 40, 20))
>Action2 : Symbol(Action2, Decl(dependentDestructuredVariables.ts, 34, 1))

    if (payload) {
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 40, 20))

        if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 40, 14))

            payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 40, 20))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
        }
        if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 40, 14))

            payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 40, 20))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
        }
    }
}

function f21(action: Action2) {
>f21 : Symbol(f21, Decl(dependentDestructuredVariables.ts, 49, 1))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 51, 13))
>Action2 : Symbol(Action2, Decl(dependentDestructuredVariables.ts, 34, 1))

    const { kind, payload } = action;
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 52, 11))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 52, 17))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 51, 13))

    if (payload) {
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 52, 17))

        if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 52, 11))

            payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 52, 17))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
        }
        if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 52, 11))

            payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 52, 17))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
        }
    }
}

function f22(action: Action2) {
>f22 : Symbol(f22, Decl(dependentDestructuredVariables.ts, 61, 1))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 63, 13))
>Action2 : Symbol(Action2, Decl(dependentDestructuredVariables.ts, 34, 1))

    if (action.payload) {
>action.payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 37, 18), Decl(dependentDestructuredVariables.ts, 38, 18))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 63, 13))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 37, 18), Decl(dependentDestructuredVariables.ts, 38, 18))

        const { kind, payload } = action;
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 65, 15))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 65, 21))
>action : Symbol(action, Decl(dependentDestructuredVariables.ts, 63, 13))

        if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 65, 15))

            payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 65, 21))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
        }
        if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 65, 15))

            payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 65, 21))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
        }
    }
}

function f23({ kind, payload }: Action2) {
>f23 : Symbol(f23, Decl(dependentDestructuredVariables.ts, 73, 1))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 75, 14))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 75, 20))
>Action2 : Symbol(Action2, Decl(dependentDestructuredVariables.ts, 34, 1))

    if (payload) {
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 75, 20))

        switch (kind) {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 75, 14))

            case 'A':
                payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 75, 20))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))

                break;
            case 'B':
                payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 75, 20))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))

                break;
            default:
                payload;  // never
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 75, 20))
        }
    }
}

type Foo =
>Foo : Symbol(Foo, Decl(dependentDestructuredVariables.ts, 88, 1))

    | { kind: 'A', isA: true }
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 91, 7))
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 91, 18))

    | { kind: 'B', isA: false }
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 92, 7))
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 92, 18))

    | { kind: 'C', isA: false };
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 93, 7))
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 93, 18))

function f30({ kind, isA }: Foo) {
>f30 : Symbol(f30, Decl(dependentDestructuredVariables.ts, 93, 32))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 95, 14))
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 95, 20))
>Foo : Symbol(Foo, Decl(dependentDestructuredVariables.ts, 88, 1))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 95, 14))

        isA;   // true
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 95, 20))
    }
    if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 95, 14))

        isA;   // false
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 95, 20))
    }
    if (kind === 'C') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 95, 14))

        isA;   // false
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 95, 20))
    }
    if (isA) {
>isA : Symbol(isA, Decl(dependentDestructuredVariables.ts, 95, 20))

        kind;  // 'A'
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 95, 14))
    }
    else {
        kind;  // 'B' | 'C'
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 95, 14))
    }
}

type Args = ['A', number] | ['B', string]
>Args : Symbol(Args, Decl(dependentDestructuredVariables.ts, 111, 1))

function f40(...[kind, data]: Args) {
>f40 : Symbol(f40, Decl(dependentDestructuredVariables.ts, 113, 41))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 115, 17))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 115, 22))
>Args : Symbol(Args, Decl(dependentDestructuredVariables.ts, 111, 1))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 115, 17))

        data.toFixed();
>data.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 115, 22))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
    if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 115, 17))

        data.toUpperCase();
>data.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 115, 22))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
    }
}

// Repro from #35283

interface A<T> { variant: 'a', value: T }
>A : Symbol(A, Decl(dependentDestructuredVariables.ts, 122, 1))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 126, 12))
>variant : Symbol(A.variant, Decl(dependentDestructuredVariables.ts, 126, 16))
>value : Symbol(A.value, Decl(dependentDestructuredVariables.ts, 126, 30))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 126, 12))

interface B<T> { variant: 'b', value: Array<T> }
>B : Symbol(B, Decl(dependentDestructuredVariables.ts, 126, 41))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 128, 12))
>variant : Symbol(B.variant, Decl(dependentDestructuredVariables.ts, 128, 16))
>value : Symbol(B.value, Decl(dependentDestructuredVariables.ts, 128, 30))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 128, 12))

type AB<T> = A<T> | B<T>;
>AB : Symbol(AB, Decl(dependentDestructuredVariables.ts, 128, 48))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 130, 8))
>A : Symbol(A, Decl(dependentDestructuredVariables.ts, 122, 1))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 130, 8))
>B : Symbol(B, Decl(dependentDestructuredVariables.ts, 126, 41))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 130, 8))

declare function printValue<T>(t: T): void;
>printValue : Symbol(printValue, Decl(dependentDestructuredVariables.ts, 130, 25))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 132, 28))
>t : Symbol(t, Decl(dependentDestructuredVariables.ts, 132, 31))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 132, 28))

declare function printValueList<T>(t: Array<T>): void;
>printValueList : Symbol(printValueList, Decl(dependentDestructuredVariables.ts, 132, 43))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 134, 32))
>t : Symbol(t, Decl(dependentDestructuredVariables.ts, 134, 35))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 134, 32))

function unrefined1<T>(ab: AB<T>): void {
>unrefined1 : Symbol(unrefined1, Decl(dependentDestructuredVariables.ts, 134, 54))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 136, 20))
>ab : Symbol(ab, Decl(dependentDestructuredVariables.ts, 136, 23))
>AB : Symbol(AB, Decl(dependentDestructuredVariables.ts, 128, 48))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 136, 20))

    const { variant, value } = ab;
>variant : Symbol(variant, Decl(dependentDestructuredVariables.ts, 137, 11))
>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 137, 20))
>ab : Symbol(ab, Decl(dependentDestructuredVariables.ts, 136, 23))

    if (variant === 'a') {
>variant : Symbol(variant, Decl(dependentDestructuredVariables.ts, 137, 11))

        printValue<T>(value);
>printValue : Symbol(printValue, Decl(dependentDestructuredVariables.ts, 130, 25))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 136, 20))
>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 137, 20))
    }
    else {
        printValueList<T>(value);
>printValueList : Symbol(printValueList, Decl(dependentDestructuredVariables.ts, 132, 43))
>T : Symbol(T, Decl(dependentDestructuredVariables.ts, 136, 20))
>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 137, 20))
    }
}

// Repro from #38020

type Action3 =
>Action3 : Symbol(Action3, Decl(dependentDestructuredVariables.ts, 144, 1))

    | {type: 'add', payload: { toAdd: number } }
>type : Symbol(type, Decl(dependentDestructuredVariables.ts, 149, 7))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 149, 19))
>toAdd : Symbol(toAdd, Decl(dependentDestructuredVariables.ts, 149, 30))

    | {type: 'remove', payload: { toRemove: number } };
>type : Symbol(type, Decl(dependentDestructuredVariables.ts, 150, 7))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 150, 22))
>toRemove : Symbol(toRemove, Decl(dependentDestructuredVariables.ts, 150, 33))

const reducerBroken = (state: number, { type, payload }: Action3) => {
>reducerBroken : Symbol(reducerBroken, Decl(dependentDestructuredVariables.ts, 152, 5))
>state : Symbol(state, Decl(dependentDestructuredVariables.ts, 152, 23))
>type : Symbol(type, Decl(dependentDestructuredVariables.ts, 152, 39))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 152, 45))
>Action3 : Symbol(Action3, Decl(dependentDestructuredVariables.ts, 144, 1))

    switch (type) {
>type : Symbol(type, Decl(dependentDestructuredVariables.ts, 152, 39))

        case 'add':
            return state + payload.toAdd;
>state : Symbol(state, Decl(dependentDestructuredVariables.ts, 152, 23))
>payload.toAdd : Symbol(toAdd, Decl(dependentDestructuredVariables.ts, 149, 30))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 152, 45))
>toAdd : Symbol(toAdd, Decl(dependentDestructuredVariables.ts, 149, 30))

        case 'remove':
            return state - payload.toRemove;
>state : Symbol(state, Decl(dependentDestructuredVariables.ts, 152, 23))
>payload.toRemove : Symbol(toRemove, Decl(dependentDestructuredVariables.ts, 150, 33))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 152, 45))
>toRemove : Symbol(toRemove, Decl(dependentDestructuredVariables.ts, 150, 33))
    }
}

// Repro from #46143

declare var it: Iterator<number>;
>it : Symbol(it, Decl(dependentDestructuredVariables.ts, 163, 11))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --))

const { value, done } = it.next();
>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 164, 7))
>done : Symbol(done, Decl(dependentDestructuredVariables.ts, 164, 14))
>it.next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))
>it : Symbol(it, Decl(dependentDestructuredVariables.ts, 163, 11))
>next : Symbol(Iterator.next, Decl(lib.es2015.iterable.d.ts, --, --))

if (!done) {
>done : Symbol(done, Decl(dependentDestructuredVariables.ts, 164, 14))

    value;  // number
>value : Symbol(value, Decl(dependentDestructuredVariables.ts, 164, 7))
}

// Repro from #46658

declare function f50(cb: (...args: Args) => void): void
>f50 : Symbol(f50, Decl(dependentDestructuredVariables.ts, 167, 1))
>cb : Symbol(cb, Decl(dependentDestructuredVariables.ts, 171, 21))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 171, 26))
>Args : Symbol(Args, Decl(dependentDestructuredVariables.ts, 111, 1))

f50((kind, data) => {
>f50 : Symbol(f50, Decl(dependentDestructuredVariables.ts, 167, 1))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 173, 5))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 173, 10))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 173, 5))

        data.toFixed();
>data.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 173, 10))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
    if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 173, 5))

        data.toUpperCase();
>data.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 173, 10))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
    }
});

const f51: (...args: ['A', number] | ['B', string]) => void = (kind, payload) => {
>f51 : Symbol(f51, Decl(dependentDestructuredVariables.ts, 182, 5))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 182, 12))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 182, 63))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 182, 68))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 182, 63))

        payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 182, 68))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
    if (kind === 'B') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 182, 63))

        payload.toUpperCase();
>payload.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 182, 68))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
    }
};

const f52: (...args: ['A', number] | ['B']) => void = (kind, payload?) => {
>f52 : Symbol(f52, Decl(dependentDestructuredVariables.ts, 191, 5))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 191, 12))
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 191, 55))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 191, 60))

    if (kind === 'A') {
>kind : Symbol(kind, Decl(dependentDestructuredVariables.ts, 191, 55))

        payload.toFixed();
>payload.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 191, 60))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
    else {
        payload;  // undefined
>payload : Symbol(payload, Decl(dependentDestructuredVariables.ts, 191, 60))
    }
};

declare function readFile(path: string, callback: (...args: [err: null, data: unknown[]] | [err: Error, data: undefined]) => void): void;
>readFile : Symbol(readFile, Decl(dependentDestructuredVariables.ts, 198, 2))
>path : Symbol(path, Decl(dependentDestructuredVariables.ts, 200, 26))
>callback : Symbol(callback, Decl(dependentDestructuredVariables.ts, 200, 39))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 200, 51))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

readFile('hello', (err, data) => {
>readFile : Symbol(readFile, Decl(dependentDestructuredVariables.ts, 198, 2))
>err : Symbol(err, Decl(dependentDestructuredVariables.ts, 202, 19))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 202, 23))

    if (err === null) {
>err : Symbol(err, Decl(dependentDestructuredVariables.ts, 202, 19))

        data.length;
>data.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>data : Symbol(data, Decl(dependentDestructuredVariables.ts, 202, 23))
>length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
    }
    else {
        err.message;
>err.message : Symbol(Error.message, Decl(lib.es5.d.ts, --, --))
>err : Symbol(err, Decl(dependentDestructuredVariables.ts, 202, 19))
>message : Symbol(Error.message, Decl(lib.es5.d.ts, --, --))
    }
});

type ReducerArgs = ["add", { a: number, b: number }] | ["concat", { firstArr: any[], secondArr: any[] }];
>ReducerArgs : Symbol(ReducerArgs, Decl(dependentDestructuredVariables.ts, 209, 3))
>a : Symbol(a, Decl(dependentDestructuredVariables.ts, 211, 28))
>b : Symbol(b, Decl(dependentDestructuredVariables.ts, 211, 39))
>firstArr : Symbol(firstArr, Decl(dependentDestructuredVariables.ts, 211, 67))
>secondArr : Symbol(secondArr, Decl(dependentDestructuredVariables.ts, 211, 84))

const reducer: (...args: ReducerArgs) => void = (op, args) => {
>reducer : Symbol(reducer, Decl(dependentDestructuredVariables.ts, 213, 5))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 213, 16))
>ReducerArgs : Symbol(ReducerArgs, Decl(dependentDestructuredVariables.ts, 209, 3))
>op : Symbol(op, Decl(dependentDestructuredVariables.ts, 213, 49))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 213, 52))

    switch (op) {
>op : Symbol(op, Decl(dependentDestructuredVariables.ts, 213, 49))

        case "add":
            console.log(args.a + args.b);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>args.a : Symbol(a, Decl(dependentDestructuredVariables.ts, 211, 28))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 213, 52))
>a : Symbol(a, Decl(dependentDestructuredVariables.ts, 211, 28))
>args.b : Symbol(b, Decl(dependentDestructuredVariables.ts, 211, 39))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 213, 52))
>b : Symbol(b, Decl(dependentDestructuredVariables.ts, 211, 39))

            break;
        case "concat":
            console.log(args.firstArr.concat(args.secondArr));
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>args.firstArr.concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>args.firstArr : Symbol(firstArr, Decl(dependentDestructuredVariables.ts, 211, 67))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 213, 52))
>firstArr : Symbol(firstArr, Decl(dependentDestructuredVariables.ts, 211, 67))
>concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>args.secondArr : Symbol(secondArr, Decl(dependentDestructuredVariables.ts, 211, 84))
>args : Symbol(args, Decl(dependentDestructuredVariables.ts, 213, 52))
>secondArr : Symbol(secondArr, Decl(dependentDestructuredVariables.ts, 211, 84))

            break;
    }
}

reducer("add", { a: 1, b: 3 });
>reducer : Symbol(reducer, Decl(dependentDestructuredVariables.ts, 213, 5))
>a : Symbol(a, Decl(dependentDestructuredVariables.ts, 224, 16))
>b : Symbol(b, Decl(dependentDestructuredVariables.ts, 224, 22))

reducer("concat", { firstArr: [1, 2], secondArr: [3, 4] });
>reducer : Symbol(reducer, Decl(dependentDestructuredVariables.ts, 213, 5))
>firstArr : Symbol(firstArr, Decl(dependentDestructuredVariables.ts, 225, 19))
>secondArr : Symbol(secondArr, Decl(dependentDestructuredVariables.ts, 225, 37))

