=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes03.ts ===
type T = number | "foo" | "bar";
>T : T

var x: "foo" | "bar" | number;
>x : T

var y: T = undefined;
>y : T
>undefined : undefined

if (x === "foo") {
>x === "foo" : boolean
>x : T
>"foo" : "foo"

    let a = x;
>a : "foo"
>x : "foo"
}
else if (x !== "bar") {
>x !== "bar" : boolean
>x : number | "bar"
>"bar" : "bar"

    let b = x || y;
>b : T
>x || y : T
>x : number
>y : T
}
else {
    let c = x;
>c : "bar"
>x : "bar"

    let d = y;
>d : T
>y : T

    let e: (typeof x) | (typeof y) = c || d;
>e : T
>x : "bar"
>y : T
>c || d : T
>c : "bar"
>d : T
}

x = y;
>x = y : T
>x : T
>y : T

y = x;
>y = x : T
>y : T
>x : T

