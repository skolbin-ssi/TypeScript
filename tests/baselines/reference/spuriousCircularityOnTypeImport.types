=== tests/cases/compiler/types.ts ===
export type SelectorMap<T extends Record<string, (...params: unknown[]) => unknown>> = {
>SelectorMap : SelectorMap<T>
>params : unknown[]

    [key in keyof T]: T[key];
};

=== tests/cases/compiler/index.ts ===
export type SelectorMap<T extends Record<string, (...params: unknown[]) => unknown>> = {
>SelectorMap : SelectorMap<T>
>params : unknown[]

    [key in keyof T]: T[key];
};

export declare const value2: {
>value2 : { sliceSelectors: <FuncMap extends import("tests/cases/compiler/types").SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }; }

    sliceSelectors: <FuncMap extends import('./types').SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> };
>sliceSelectors : <FuncMap extends import("tests/cases/compiler/types").SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }
>selectorsBySlice : FuncMap

};

export declare const value3: {
>value3 : { sliceSelectors: <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }; }

    sliceSelectors: <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]> };
>sliceSelectors : <FuncMap extends SelectorMap<FuncMap>>(selectorsBySlice: FuncMap) => { [P in keyof FuncMap]: Parameters<FuncMap[P]>; }
>selectorsBySlice : FuncMap

};


