=== tests/cases/compiler/strictSubtypeAndNarrowing.ts ===
// Check that `any` is a strict supertype of `unknown`

declare const x11: { x: unknown };
>x11 : { x: unknown; }
>x : unknown

declare const x12: { x: any };
>x12 : { x: any; }
>x : any

const a11 = [x11, x12];
>a11 : { x: any; }[]
>[x11, x12] : { x: any; }[]
>x11 : { x: unknown; }
>x12 : { x: any; }

const a12 = [x12, x11];
>a12 : { x: any; }[]
>[x12, x11] : { x: any; }[]
>x12 : { x: any; }
>x11 : { x: unknown; }

declare const x21: { x: any };
>x21 : { x: any; }
>x : any

declare const x22: { x: unknown };
>x22 : { x: unknown; }
>x : unknown

const a21 = [x22, x21];
>a21 : { x: any; }[]
>[x22, x21] : { x: any; }[]
>x22 : { x: unknown; }
>x21 : { x: any; }

const a22 = [x21, x22];
>a22 : { x: any; }[]
>[x21, x22] : { x: any; }[]
>x21 : { x: any; }
>x22 : { x: unknown; }

// Strict subtype doesn't infer index signatures in non-fresh object types

const x31 = { a: 1 };
>x31 : { a: number; }
>{ a: 1 } : { a: number; }
>a : number
>1 : 1

declare const x32: { [x: string]: unknown, a: number }
>x32 : { [x: string]: unknown; a: number; }
>x : string
>a : number

const a31 = [x31, x32];
>a31 : { a: number; }[]
>[x31, x32] : { a: number; }[]
>x31 : { a: number; }
>x32 : { [x: string]: unknown; a: number; }

const a32 = [x32, x31];
>a32 : { a: number; }[]
>[x32, x31] : { a: number; }[]
>x32 : { [x: string]: unknown; a: number; }
>x31 : { a: number; }

declare const x41: { [x: string]: unknown, a: number }
>x41 : { [x: string]: unknown; a: number; }
>x : string
>a : number

const x42 = { a: 1 };
>x42 : { a: number; }
>{ a: 1 } : { a: number; }
>a : number
>1 : 1

const a41 = [x42, x41];
>a41 : { a: number; }[]
>[x42, x41] : { a: number; }[]
>x42 : { a: number; }
>x41 : { [x: string]: unknown; a: number; }

const a42 = [x41, x42];
>a42 : { a: number; }[]
>[x41, x42] : { a: number; }[]
>x41 : { [x: string]: unknown; a: number; }
>x42 : { a: number; }

// (...args: A) => R, where A is any, any[], never, or never[] and R is any or unknown, is supertype of all function types.

declare function isFunction<T>(x: unknown): x is T;
>isFunction : <T>(x: unknown) => x is T
>x : unknown

type A = (...args: any) => unknown;
>A : (...args: any) => unknown
>args : any

type B = (...args: any[]) => unknown;
>B : (...args: any[]) => unknown
>args : any[]

type C = (...args: never) => unknown;
>C : (...args: never) => unknown
>args : never

type D = (...args: never[]) => unknown;
>D : (...args: never[]) => unknown
>args : never[]

type FnTypes = A | B | C | D;
>FnTypes : A | B | C | D

function fx1(f: (() => void) | undefined) {
>fx1 : (f: (() => void) | undefined) => void
>f : (() => void) | undefined

    if (isFunction<A>(f)) {
>isFunction<A>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : (() => void) | undefined

        f;  // () => void
>f : () => void
    }
    else {
        f;  // undefined
>f : undefined
    }
    f;  // (() => void) | undefined
>f : (() => void) | undefined
}

function fx2(f: (() => void) | undefined) {
>fx2 : (f: (() => void) | undefined) => void
>f : (() => void) | undefined

    if (isFunction<B>(f)) {
>isFunction<B>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : (() => void) | undefined

        f;  // () => void
>f : () => void
    }
    else {
        f;  // undefined
>f : undefined
    }
    f;  // (() => void) | undefined
>f : (() => void) | undefined
}

function fx3(f: (() => void) | undefined) {
>fx3 : (f: (() => void) | undefined) => void
>f : (() => void) | undefined

    if (isFunction<C>(f)) {
>isFunction<C>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : (() => void) | undefined

        f;  // () => void
>f : () => void
    }
    else {
        f;  // undefined
>f : undefined
    }
    f;  // (() => void) | undefined
>f : (() => void) | undefined
}

function fx4(f: (() => void) | undefined) {
>fx4 : (f: (() => void) | undefined) => void
>f : (() => void) | undefined

    if (isFunction<D>(f)) {
>isFunction<D>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : (() => void) | undefined

        f;  // () => void
>f : () => void
    }
    else {
        f;  // undefined
>f : undefined
    }
    f;  // (() => void) | undefined
>f : (() => void) | undefined
}

function checkA(f: FnTypes) {
>checkA : (f: FnTypes) => void
>f : FnTypes

    if (isFunction<A>(f)) {
>isFunction<A>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : FnTypes

        f;  // A | B
>f : A | B
    }
    else {
        f;  // C | D
>f : C | D
    }
    f;  // FnTypes
>f : FnTypes
}

function checkB(f: FnTypes) {
>checkB : (f: FnTypes) => void
>f : FnTypes

    if (isFunction<B>(f)) {
>isFunction<B>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : FnTypes

        f;  // A | B
>f : A | B
    }
    else {
        f;  // C | D
>f : C | D
    }
    f;  // FnTypes
>f : FnTypes
}

function checkC(f: FnTypes) {
>checkC : (f: FnTypes) => void
>f : FnTypes

    if (isFunction<C>(f)) {
>isFunction<C>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : FnTypes

        f;  // FnTypes
>f : FnTypes
    }
    else {
        f;  // never
>f : never
    }
    f;  // FnTypes
>f : FnTypes
}

function checkD(f: FnTypes) {
>checkD : (f: FnTypes) => void
>f : FnTypes

    if (isFunction<C>(f)) {
>isFunction<C>(f) : boolean
>isFunction : <T>(x: unknown) => x is T
>f : FnTypes

        f;  // FnTypes
>f : FnTypes
    }
    else {
        f;  // never
>f : never
    }
    f;  // FnTypes
>f : FnTypes
}

// Type of x = y is y with freshness preserved

function fx10(obj1: { x?: number }, obj2: { x?: number, y?: number }) {
>fx10 : (obj1: {    x?: number;}, obj2: {    x?: number;    y?: number;}) => void
>obj1 : { x?: number | undefined; }
>x : number | undefined
>obj2 : { x?: number | undefined; y?: number | undefined; }
>x : number | undefined
>y : number | undefined

    obj1 = obj2 = { x: 1, y: 2 };
>obj1 = obj2 = { x: 1, y: 2 } : { x: number; y: number; }
>obj1 : { x?: number | undefined; }
>obj2 = { x: 1, y: 2 } : { x: number; y: number; }
>obj2 : { x?: number | undefined; y?: number | undefined; }
>{ x: 1, y: 2 } : { x: number; y: number; }
>x : number
>1 : 1
>y : number
>2 : 2

    obj2 = obj1 = { x: 1, y: 2 };
>obj2 = obj1 = { x: 1, y: 2 } : { x: number; y: number; }
>obj2 : { x?: number | undefined; y?: number | undefined; }
>obj1 = { x: 1, y: 2 } : { x: number; y: number; }
>obj1 : { x?: number | undefined; }
>{ x: 1, y: 2 } : { x: number; y: number; }
>x : number
>1 : 1
>y : number
>2 : 2
}

function fx11(): { x?: number } {
>fx11 : () => {    x?: number;}
>x : number | undefined

    let obj: { x?: number, y?: number };
>obj : { x?: number | undefined; y?: number | undefined; }
>x : number | undefined
>y : number | undefined

    return obj = { x: 1, y: 2 };
>obj = { x: 1, y: 2 } : { x: number; y: number; }
>obj : { x?: number | undefined; y?: number | undefined; }
>{ x: 1, y: 2 } : { x: number; y: number; }
>x : number
>1 : 1
>y : number
>2 : 2
}

