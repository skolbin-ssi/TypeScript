=== tests/cases/compiler/consistentUnionSubtypeReduction.ts ===
// https://github.com/microsoft/TypeScript/issues/31155

declare const MyArray: {
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }

    isArray<T>(arg: T | {}): arg is T extends readonly any[] ? (unknown extends T ? never : readonly any[]) : any[];
>isArray : <T>(arg: T | {}) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>arg : {} | T

};

declare const a: readonly string[] | string;
>a : string | readonly string[]

declare const b: string[] | string;
>b : string | string[]

declare const c: unknown;
>c : unknown

if (MyArray.isArray(a)) {
>MyArray.isArray(a) : boolean
>MyArray.isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }
>isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>a : string | readonly string[]

    a; // readonly string[]
>a : readonly string[]
}
else {
    a;  // string
>a : string
}
a; // readonly string[] | string;
>a : string | readonly string[]

if (MyArray.isArray(b)) {
>MyArray.isArray(b) : boolean
>MyArray.isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }
>isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>b : string | string[]

    b; // string[] | string;
>b : string[]
}
else {
    b; // string
>b : string
}
b; // string[] | string;
>b : string | string[]

if (MyArray.isArray(c)) {
>MyArray.isArray(c) : boolean
>MyArray.isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }
>isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>c : unknown

    c; // any[]
>c : any[]
}


function f<T>(x: T) {
>f : <T>(x: T) => void
>x : T

    const a: readonly T[] | string = null!;
>a : string | readonly T[]
>null! : null
>null : null

    const b: T[] | string = null!;
>b : string | T[]
>null! : null
>null : null

    const c: T = null!;
>c : T
>null! : null
>null : null

    if (MyArray.isArray(a)) {
>MyArray.isArray(a) : boolean
>MyArray.isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }
>isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>a : string | readonly T[]

        a; // readonly T[]
>a : readonly T[]
    }
    else {
        a; // string
>a : string
    }
    a; // readonly T[] | string;
>a : string | readonly T[]

    if (MyArray.isArray(b)) {
>MyArray.isArray(b) : boolean
>MyArray.isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }
>isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>b : string | T[]

        b; // T[]
>b : T[]
    }
    else {
        b; // string
>b : string
    }
    b;
>b : string | T[]

    if (MyArray.isArray(c)) {
>MyArray.isArray(c) : boolean
>MyArray.isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>MyArray : { isArray<T>(arg: {} | T): arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]; }
>isArray : <T>(arg: {} | T) => arg is T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[]
>c : T

        c; // T & (T extends readonly any[] ? readonly any[] : any[])
>c : T & (T extends readonly any[] ? unknown extends T ? never : readonly any[] : any[])
    }
}

