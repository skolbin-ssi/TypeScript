=== /a.ts ===
export default class {}
export class A {}
>A : A

export type B = {};
>B : B

=== /b.ts ===
import { A, B } from './a'; // Error
>A : typeof A
>B : any

let a: A;
>a : A

let b: B;
>b : B

console.log(a, b);
>console.log(a, b) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>a : A
>b : B

=== /c.ts ===
import Default, * as named from './a'; // Error
>Default : typeof Default
>named : typeof named

let a: Default;
>a : Default

let b: named.B;
>b : named.B
>named : any

console.log(a, b);
>console.log(a, b) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>a : Default
>b : named.B

=== /d.ts ===
import Default, { A } from './a';
>Default : typeof Default
>A : typeof A

const a = A;
>a : typeof A
>A : typeof A

let b: Default;
>b : Default

console.log(a, b);
>console.log(a, b) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>a : typeof A
>b : Default

=== /e.ts ===
import { A, B } from './a'; // noUnusedLocals error only
>A : typeof A
>B : any

